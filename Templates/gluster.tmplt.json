{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Conditions": {
    "NotGenFive": {
      "Fn::Not": [
        {
          "Fn::Or": [
            {
              "Fn::Equals": [
                {
                  "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "c5"
              ]
            },
            {
              "Fn::Equals": [
                {
                  "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "m5"
              ]
            },
            {
              "Fn::Equals": [
                { "Fn::Select": [
                    "0",
                    { "Fn::Split": [ ".", { "Ref": "InstanceType" } ] }
                  ]
                },
                "t3"
              ]
            }
          ]
        }
      ]
    },
    "Replication": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            { "Ref": "ReplicaNum" },
            "1"
          ]
        }
      ]
    }
  },
  "Description": "GlusterFS storage cluster CloudFormation template file.",
  "Mappings": {
    "InstanceTypeCapabilities": {
      "IsGenFive": {
        "ExternDeviceNameRoot": "/dev/sda1",
        "InternDeviceNameRoot": "/dev/nvme0n1",
        "ExternDeviceNameApp": "/dev/xvdf",
        "InternDeviceNameApp": "/dev/nvme1n1"
      },
      "PreGenFive": {
        "ExternDeviceNameRoot": "/dev/sda1",
        "InternDeviceNameRoot": "/dev/xvda",
        "ExternDeviceNameApp": "/dev/xvdf",
        "InternDeviceNameApp": "/dev/xvdf"
      }
    },
    "MultiplicationTable": {
      "1": {
        "1": "1",
        "2": "2",
        "3": "3",
        "4": "4",
        "5": "5",
        "6": "6",
        "7": "7",
        "8": "8",
        "9": "9"
      },
      "2": {
        "1": "2",
        "2": "4",
        "3": "6",
        "4": "8",
        "5": "10",
        "6": "12",
        "7": "14",
        "8": "16",
        "9": "18"
      },
      "3": {
        "1": "3",
        "2": "6",
        "3": "9",
        "4": "12",
        "5": "15",
        "6": "18",
        "7": "21",
        "8": "24",
        "9": "27"
      },
      "4": {
        "1": "4",
        "2": "8",
        "3": "12",
        "4": "16",
        "5": "20",
        "6": "24",
        "7": "28",
        "8": "32",
        "9": "36"
      },
      "5": {
        "1": "5",
        "2": "10",
        "3": "15",
        "4": "20",
        "5": "25",
        "6": "30",
        "7": "35",
        "8": "40",
        "9": "45"
      },
      "6": {
        "1": "6",
        "2": "12",
        "3": "18",
        "4": "24",
        "5": "30",
        "6": "36",
        "7": "42",
        "8": "48",
        "9": "54"
      },
      "7": {
        "1": "7",
        "2": "14",
        "3": "21",
        "4": "28",
        "5": "35",
        "6": "42",
        "7": "49",
        "8": "56",
        "9": "63"
      },
      "8": {
        "1": "8",
        "2": "16",
        "3": "24",
        "4": "32",
        "5": "40",
        "6": "48",
        "7": "56",
        "8": "64",
        "9": "72"
      },
      "9": {
        "1": "9",
        "2": "18",
        "3": "27",
        "4": "36",
        "5": "45",
        "6": "54",
        "7": "63",
        "8": "72",
        "9": "81"
      }
    }
  },
  "Outputs": {},
  "Parameters": {
    "AdminCIDR": {
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.",
      "Default": "0.0.0.0/0",
      "Description": "Source IP address for administrative SSH access",
      "MaxLength": "18",
      "MinLength": "9",
      "Type": "String"
    },
    "AmiId": {
      "AllowedPattern": "^ami-[0-9a-z]{8}$|^ami-[0-9a-z]{17}$",
      "Description": "ID of the AMI to launch",
      "Type": "String"
    },
    "DistributionNum": {
      "ConstraintDescription": "must be 1 - 9",
      "Default": "1",
      "Description": "Number of distribution.(1-9)",
      "MaxValue": "9",
      "MinValue": "1",
      "Type": "Number"
    },
    "InstanceType": {
      "AllowedValues": [
        "t2.small",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t3.small",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge"
      ],
      "Default": "t2.small",
      "Description": "GlusterFS node EC2 instance type",
      "Type": "String"
    },
    "KeyName": {
      "AllowedPattern": "[-_ a-zA-Z0-9]*",
      "ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores.",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "MaxLength": "64",
      "MinLength": "1",
      "Type": "String"
    },
    "ReplicaNum": {
      "ConstraintDescription": "must be 1 - 9",
      "Default": "2",
      "Description": "Number of replica.(1-9; 1 means no replica.)",
      "MaxValue": "9",
      "MinValue": "1",
      "Type": "Number"
    },
    "RootVolumeSize": {
      "ConstraintDescription": "Must be between 20GiB and 16384GiB.",
      "Default": "20",
      "Description": "Size in GB of the instance's root EBS volume.",
      "MaxValue": "16384",
      "MinValue": "20",
      "Type": "Number"
    },
    "SharedVolumeSize": {
      "ConstraintDescription": "Must be between 10GiB and 16384GiB.",
      "Default": "10",
      "Description": "Size in GB of the EBS volume to create. Ignored if \"SharedVolumeDevice\" is blank",
      "MaxValue": "16384",
      "MinValue": "10",
      "Type": "Number"
    },
    "SharedVolumeType": {
      "AllowedValues": [
        "gp2",
        "io1",
        "sc1",
        "st1",
        "standard"
      ],
      "Default": "gp2",
      "Description": "Type of EBS volume to create. Ignored if \"SharedVolumeDevice\" is blank",
      "Type": "String"
    },
    "SubnetList": {
      "Description": "Subnets to which GlusterFS nodes may belong.",
      "Type": "List<AWS::EC2::Subnet::Id>"
    },
    "VpcId": {
      "Default": "vpc-xxxxxxxx",
      "Description": "VPC ID to which GlusterFS nodes belong.",
      "Type": "AWS::EC2::VPC::Id"
    }
  },
  "Resources": {
    "GlusterNodeSecurityGroup": {
      "Properties": {
        "GroupDescription": "Allow unfettered communications between cluster-nodes",
        "SecurityGroupIngress": [
          {
            "CidrIp": { "Ref": "AdminCIDR" },
            "FromPort": "22",
            "IpProtocol": "tcp",
            "ToPort": "22"
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      },
      "Type": "AWS::EC2::SecurityGroup"
    },
    "GlusterNodeSecurityGroupIngress": {
      "Properties": {
        "FromPort": "0",
        "GroupId": { "Ref": "GlusterNodeSecurityGroup" },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": { "Ref": "GlusterNodeSecurityGroup" },
        "ToPort": "65535"
      },
      "Type": "AWS::EC2::SecurityGroupIngress"
    },
    "NodeFleet": {
      "Properties": {
        "DesiredCapacity": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "LaunchConfigurationName": { "Ref": "NodeLaunchConfig" },
        "MaxSize": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "MinSize": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": "true",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  { "Ref": "AWS::StackName" },
                  "GlusterNode"
                ]
              ]
            }
          }
        ],
        "VPCZoneIdentifier": { "Ref": "SubnetList" }
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup"
    },
    "NodeLaunchConfig": {
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "init": [
              "installGlusterd",
              "startGlusterd"
            ],
            "makeGluster": [
              {
                "ConfigSet": "init"
              },
              "mountVolume"
            ],
            "makeNode": [
              {
                "ConfigSet": "init"
              },
              "GlusterSetup",
              "makeBrick",
              "makeVolume"
            ]
          },
          "GlusterSetup": {
            "files": {
              "/etc/cfn/scripts/volumeSetup.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n",
                      "# Script to configure an OS for use with Gluster\n",
                      "#\n",
                      "#################################################################\n",
                      "PROGNAME=\"$(basename \"${0}\")\"\n",
                      "VOLNAME=\"${1:-vol01}\"\n",
                      "VOLMOUNT=\"${3:-/var/glusterfs/${VOLNAME}}\"\n",
                      "REPLCNT=\"replica ${2:-2}\"\n",
                      "if [[ ${REPLCNT} =~ .*2 ]]\n",
                      "then\n",
                      "   FORCE=\"force\"\n",
                      "fi\n",
                      "\n",
                      "##\n",
                      "## Set up an error logging and exit-state\n",
                      "function err_exit {\n",
                      "   local ERRSTR=\"${1}\"\n",
                      "   local SCRIPTEXIT=${2:-1}\n",
                      "\n",
                      "   # Our output channels\n",
                      "   echo \"${ERRSTR}\" > /dev/stderr\n",
                      "   logger -t \"${PROGNAME}\" -p kern.crit \"${ERRSTR}\"\n",
                      "\n",
                      "   # Need our exit to be an integer\n",
                      "   if [[ ${SCRIPTEXIT} =~ ^[0-9]+$ ]]\n",
                      "   then\n",
                      "      exit \"${SCRIPTEXIT}\"\n",
                      "   else\n",
                      "      exit 1\n",
                      "   fi\n",
                      "}\n",
                      "\n",
                      "# Create location to mount the created volume\n",
                      "printf \"Creating %s... \" \"${VOLMOUNT}\"\n",
                      "if [[ -d ${VOLMOUNT} ]]\n",
                      "then\n",
                      "   echo \"Already exists\"\n",
                      "else\n",
                      "   install -Ddm 0755 \"${VOLMOUNT}\" && echo \"Success\" || \\\n",
                      "     err_exit \"Failed creating ${VOLMOUNT}\"\n",
                      "fi\n",
                      "\n",
                      "\n",
                      "sleep $[ ( $RANDOM % 30 )  + 30 ]\n",
                      "\n",
                      "# Find our peers\n",
                      "for HOST in $( cat /etc/glusterhosts )\n",
                      "do\n",
                      "   gluster peer probe ${HOST} || err_exit \"Peer-probe failed for ${HOST}\"\n",
                      "done\n",
                      "\n",
                      "# Create a replicated volume\n",
                      "printf \"Attempting to create %s... \" \"${VOLNAME}\"\n",
                      "if [[ $(gluster volume info \"${VOLNAME}\" > /dev/null 2>&1 )$? -eq 0 ]]\n",
                      "then\n",
                      "   echo \"Volume '${VOLNAME}' already exists\"\n",
                      "else\n",
                      "   gluster volume create \"${VOLNAME}\" ${REPLCNT} \\\n",
                      "      $( sed -r \"s!( +|\t+|$)!:${VOLMOUNT} !g\" /etc/glusterhosts ) \\\n",
                      "      ${FORCE} && echo \"Success\" || err_exit \"Creation of '${VOLNAME}' failed\"\n",
                      "\n",
                      "   printf \"Attempting to start %s... \" \"${VOLNAME}\"\n",
                      "   gluster volume start \"${VOLNAME}\" || err_exit \"Failed to start Gluster-volume '${VOLNAME}'\"\n",
                      "fi\n"
                    ]
                  ]
                },
                "group": "root",
                "mode": "000700",
                "owner": "root"
              }
            }
          },
          "installGlusterd": {
            "packages": {
              "yum": {
                "centos-release-gluster41": []
              }
            }
          },
          "makeBrick": {
            "commands": {
              "00formatFS": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                       "mkfs.ext4 -I 512 ",
                       {
                         "Fn::If": [
                           "NotGenFive",
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "PreGenFive",
                               "InternDeviceNameApp"
                             ]
                           },
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "IsGenFive",
                               "InternDeviceNameApp"
                             ]
                           }
                         ]
                       },
                       "\n"
                    ]
                  ]
                }
              },
              "01makeBrickDir": {
                "command": "install -D -d -m 0750 /bricks/vol01/"
              },
              "02mountBrickDir": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                       "mount -t ext4 ",
                       {
                         "Fn::If": [
                           "NotGenFive",
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "PreGenFive",
                               "InternDeviceNameApp"
                             ]
                           },
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "IsGenFive",
                               "InternDeviceNameApp"
                             ]
                           }
                         ]
                       },
                       " /bricks/vol01/\n"
                    ]
                  ]
                }
              },
              "03modifyFstab": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                       "echo '",
                       {
                         "Fn::If": [
                           "NotGenFive",
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "PreGenFive",
                               "InternDeviceNameApp"
                             ]
                           },
                           {
                             "Fn::FindInMap": [
                               "InstanceTypeCapabilities",
                               "IsGenFive",
                               "InternDeviceNameApp"
                             ]
                           }
                         ]
                       },
                       " /bricks/vol01 ext4 defaults,noatime 1 1' >> /etc/fstab\n"
                    ]
                  ]
                }
              }
            }
          },
          "makeVolume": {
            "commands": {
              "00-list-hosts": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "aws ec2 describe-instances --region ",
                      { "Ref": "AWS::Region" },
                      " --filter 'Name=tag-key,Values=Name','Name=tag-value,Values=",
                      {
                        "Fn::Join": [
                          "-",
                          [
                            { "Ref": "AWS::StackName" },
                            "GlusterNode"
                          ]
                        ]
                      },
                      "' --query 'Reservations[*].Instances[*].PrivateIpAddress' --output text",
                      "> /etc/glusterhosts"
                    ]
                  ]
                }
              },
              "01-firewalld": {
                "command": "firewall-offline-cmd --add-service=glusterfs && systemctl restart firewalld",
                "ignoreErrors": "true"
              },
              "02-gluster-config": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/etc/cfn/scripts/volumeSetup.sh vol01 ",
                      { "Ref": "ReplicaNum" },
                      " /bricks/vol01/shared\n"
                    ]
                  ]
                }
              }
            }
          },
          "mountVolume": {
            "commands": {
              "00makeMountPoint": {
                "command": "mkdir -p /mnt/glusterfs/vol01",
                "ignoreErrors": "true"
              },
              "01mountVolume": {
                "command": "mount -t glusterfs $(head -n 1 /etc/glusterhosts|cut -f1):/vol01 /mnt/glusterfs/vol01",
                "ignoreErrors": "true"
              },
              "02modifyFstab": {
                "command": "echo \"$(head -n 1 glusterhosts|cut -f1):/vol01 /mnt/glusterfs/vol01 glusterfs defaults,noatime 0 0\" >> /etc/fstab",
                "ignoreErrors": "true",
                "test": "test -d /mnt/glusterfs/vol01/lost+found/"
              }
            },
            "packages": {
              "yum": {
                "glusterfs": [],
                "glusterfs-fuse": []
              }
            }
          },
          "startGlusterd": {
            "packages": {
              "yum": {
                "glusterfs-server": []
              }
            },
            "services": {
              "sysvinit": {
                "glusterd": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": "false",
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "VolumeSize": { "Ref": "RootVolumeSize" },
              "VolumeType": "gp2"
            }
          },
          {
            "DeviceName": {
              "Fn::If": [
                "NotGenFive",
                {
                  "Fn::FindInMap": [
                     "InstanceTypeCapabilities",
                     "PreGenFive",
                     "ExternDeviceNameApp"
                  ]
                },
                {
                  "Fn::FindInMap": [
                    "InstanceTypeCapabilities",
                    "IsGenFive",
                    "ExternDeviceNameApp"
                  ]
                }
              ]
            },
            "Ebs": {
              "DeleteOnTermination": "true",
              "VolumeSize": { "Ref": "SharedVolumeSize" },
              "VolumeType": { "Ref": "SharedVolumeType" }
            }
          }
        ],
        "IamInstanceProfile": { "Ref": "PowerUserProfile" },
        "ImageId": { "Ref": "AmiId" },
        "InstanceMonitoring": "false",
        "InstanceType": { "Ref": "InstanceType" },
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [
          { "Ref": "GlusterNodeSecurityGroup" }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#! /bin/bash -v\n",
                "yum update -y\n",
                "# Helper function\n",
                "function error_exit\n",
                "{\n",
                "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '",
                { "Ref": "NodeWaitHandle" },
                "'\n",
                "  exit 1\n",
                "}\n",
                "# Install packages\n",
                "/opt/aws/bin/cfn-init -v -s ",
                { "Ref": "AWS::StackId" },
                " -r NodeLaunchConfig -c makeNode",
                "  --region ",
                { "Ref": "AWS::Region" },
                " || error_exit 'Failed to run cfn-init'\n",
                "# All is well so signal success\n",
                "/opt/aws/bin/cfn-signal -e 0 '",
                { "Ref": "NodeWaitHandle" },
                "'\n"
              ]
            ]
          }
        }
      },
      "Type": "AWS::AutoScaling::LaunchConfiguration"
    },
    "NodeWaitCondition": {
      "DependsOn": "NodeFleet",
      "Properties": {
        "Count": {
          "Fn::FindInMap": [
            "MultiplicationTable",
            { "Ref": "ReplicaNum" },
            { "Ref": "DistributionNum" }
          ]
        },
        "Handle": { "Ref": "NodeWaitHandle" },
        "Timeout": "600"
      },
      "Type": "AWS::CloudFormation::WaitCondition"
    },
    "NodeWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "PowerUserProfile": {
      "Properties": {
        "Path": "/",
        "Roles": [
          { "Ref": "PowerUserRole" }
        ]
      },
      "Type": "AWS::IAM::InstanceProfile"
    },
    "PowerUserRole": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              }
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "NotAction": "iam:*",
                  "Resource": "*",
                  "Sid": "PowerUserStmt"
                }
              ]
            },
            "PolicyName": "PowerUserPolicy"
          }
        ]
      },
      "Type": "AWS::IAM::Role"
    }
  }
}
